"use client";

import { useState } from "react";
import { Search, Clock, Users, Plus } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import type { Recipe } from "@/app/planner/page";
import { DialogDescription } from "@radix-ui/react-dialog";

interface AddRecipeModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAddRecipe: (recipe: Recipe) => void;
  recipes: Recipe[];
  selectedSlot: { day: string; mealType: string };
}

export function AddRecipeModal({
  isOpen,
  onClose,
  onAddRecipe,
  recipes,
  selectedSlot,
}: AddRecipeModalProps) {
  const [searchQuery, setSearchQuery] = useState("");

  const filteredRecipes = recipes.filter((recipe) => {
    const matchesSearch = recipe.title
      .toLowerCase()
      .includes(searchQuery.toLowerCase());
    const matchesMealType = recipe.mealType.some(
      (type) => type.toLowerCase() === selectedSlot.mealType.toLowerCase()
    );
    return matchesSearch && (searchQuery || matchesMealType);
  });

  const handleAddRecipe = (recipe: Recipe) => {
    onAddRecipe(recipe);
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={ onClose}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-hidden">
        <DialogHeader>
          <DialogTitle>
            Add Recipe to {selectedSlot.day}{" "}
            {selectedSlot.mealType.charAt(0).toUpperCase() +
              selectedSlot.mealType.slice(1)}
          </DialogTitle>
        </DialogHeader>

        <DialogDescription>
          <div className="space-y-4">
            {/* Search */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Search recipes..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 rounded-xl"
              />
            </div>

            {/* Recipe List */}
            <div className="space-y-3 max-h-[400px] overflow-y-auto">
              {filteredRecipes.length > 0 ? (
                filteredRecipes.map((recipe) => (
                  <Card
                    key={recipe.id}
                    className="border-0 bg-gradient-to-br from-card to-card/50"
                  >
                    <CardContent className="p-4">
                      <div className="flex items-start gap-4">
                        <img
                          src={recipe.image || "/placeholder.svg"}
                          alt={recipe.title}
                          className="w-20 h-20 rounded-lg object-cover flex-shrink-0"
                        />
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold mb-2">{recipe.title}</h3>
                          <div className="flex items-center gap-4 text-sm text-muted-foreground mb-2">
                            <div className="flex items-center gap-1">
                              <Clock className="h-4 w-4" />
                              {recipe.prepTime + recipe.cookTime}m
                            </div>
                            <div className="flex items-center gap-1">
                              <Users className="h-4 w-4" />
                              {recipe.servings}
                            </div>
                            <span className="font-medium text-primary">
                              {recipe.calories} cal
                            </span>
                          </div>
                          <div className="flex items-center justify-between">
                            <div className="flex flex-wrap gap-1">
                              {recipe.dietTypes.slice(0, 2).map((tag) => (
                                <Badge
                                  key={tag}
                                  variant="outline"
                                  className="text-xs"
                                >
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                            <Button
                              size="sm"
                              onClick={() => handleAddRecipe(recipe)}
                              className="rounded-xl bg-gradient-to-r from-primary to-accent hover:opacity-90"
                            >
                              <Plus className="h-4 w-4 mr-1" />
                              Add
                            </Button>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <p>No recipes found for this meal type</p>
                </div>
              )}
            </div>
          </div>
        </DialogDescription>
      </DialogContent>
    </Dialog>
  );
}



















"use client";

import { useState } from "react";
import { useDrag } from "react-dnd";
import { Search, Clock, Users, Heart } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import type { Recipe } from "@/app/planner/page";

interface RecipeLibraryProps {
  recipes: Recipe[];
}

function DraggableRecipeCard({ recipe }: { recipe: Recipe }) {
  const [{ isDragging }, drag] = useDrag({
    type: "recipe",
    item: recipe,
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  return (
    <Card
      ref={drag as unknown as React.Ref<HTMLDivElement>}
      className={`cursor-move transition-all duration-200 border-0 bg-gradient-to-br from-card to-card/50 ${
        isDragging
          ? "opacity-50 scale-95"
          : "hover:shadow-lg hover:-translate-y-1"
      }`}
    >
      <CardContent className="p-4">
        <div className="flex items-start gap-3">
          <img
            src={recipe.image || "/placeholder.svg"}
            alt={recipe.title}
            className="w-16 h-16 rounded-lg object-cover flex-shrink-0"
          />
          <div className="flex-1 min-w-0">
            <h3 className="font-semibold text-sm line-clamp-2 mb-2">
              {recipe.title}
            </h3>
            <div className="flex items-center gap-3 text-xs text-muted-foreground mb-2">
              <div className="flex items-center gap-1">
                <Clock className="h-3 w-3" />
                {recipe.prepTime + recipe.cookTime}m
              </div>
              <div className="flex items-center gap-1">
                <Users className="h-3 w-3" />
                {recipe.servings}
              </div>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-xs font-medium text-primary">
                {recipe.calories} cal
              </span>
              <div className="flex gap-1 text-xs">
                <span className="text-green-600">{recipe.protein}p</span>
                <span className="text-orange-600">{recipe.carbs}c</span>
                <span className="text-red-600">{recipe.fat}f</span>
              </div>
            </div>
            <div className="flex flex-wrap gap-1 mt-2">
              {recipe.dietTypes.slice(0, 2).map((tag) => (
                <Badge key={tag} variant="outline" className="text-xs">
                  {tag}
                </Badge>
              ))}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

export function RecipeLibrary({ recipes }: RecipeLibraryProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("All");

  const filteredRecipes = recipes.filter((recipe) => {
    const matchesSearch = recipe.title
      .toLowerCase()
      .includes(searchQuery.toLowerCase());
    const matchesCategory =
      selectedCategory === "All" || recipe.mealType.includes(selectedCategory);
    return matchesSearch && matchesCategory;
  });

  const categories = ["All", "Breakfast", "Lunch", "Dinner", "Snack"];

  return (
    <Card className="border-0 shadow-lg h-fit">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Heart className="h-5 w-5 text-primary" />
          Recipe Library
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Search */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
          <Input
            placeholder="Search recipes..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 rounded-xl"
          />
        </div>

        {/* Category Filter */}
        <div className="flex flex-wrap gap-2">
          {categories.map((category) => (
            <Button
              key={category}
              variant={selectedCategory === category ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedCategory(category)}
              className="rounded-full text-xs"
            >
              {category}
            </Button>
          ))}
        </div>

        {/* Recipe List */}
        <div className="space-y-3 max-h-[600px] overflow-y-auto">
          {filteredRecipes.length > 0 ? (
            filteredRecipes.map((recipe) => (
              <DraggableRecipeCard key={recipe.id} recipe={recipe} />
            ))
          ) : (
            <div className="text-center py-8 text-muted-foreground">
              <p>No recipes found</p>
            </div>
          )}
        </div>

        {/* Drag Instruction */}
        <div className="text-xs text-muted-foreground text-center p-3 bg-muted/30 rounded-lg">
          💡 Drag recipes to meal slots or click on a slot to add
        </div>
      </CardContent>
    </Card>
  );
}


















"use client";

import { useDrop } from "react-dnd";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Plus,
  MoreHorizontal,
  Trash2,
  Edit3,
  Clock,
  Users,
} from "lucide-react";
import type { Recipe } from "@/app/planner/page";

interface WeeklyCalendarProps {
  weekDates: Date[];
  mealPlan: Record<string, Record<string, Recipe | null>>;
  onSlotClick: (day: string, mealType: string) => void;
  onRemoveRecipe: (day: string, mealType: string) => void;
  onAddRecipe: (day: string, mealType: string, recipe: Recipe) => void;
}

const daysOfWeek = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
];
const mealTypes = [
  {
    key: "breakfast",
    label: "Breakfast",
    color:
      "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200",
  },
  {
    key: "lunch",
    label: "Lunch",
    color: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
  },
  {
    key: "dinner",
    label: "Dinner",
    color: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200",
  },
  {
    key: "snack",
    label: "Snack",
    color:
      "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200",
  },
];

function MealSlot({
  day,
  mealType,
  recipe,
  onSlotClick,
  onRemoveRecipe,
  onAddRecipe,
}: {
  day: string;
  mealType: string;
  recipe: Recipe | null;
  onSlotClick: () => void;
  onRemoveRecipe: () => void;
  onAddRecipe: (recipe: Recipe) => void;
}) {
  const [{ isOver }, drop] = useDrop({
    accept: "recipe",
    drop: (item: Recipe) => {
      onAddRecipe(item);
    },
    collect: (monitor) => ({
      isOver: monitor.isOver(),
    }),
  });

  const mealTypeInfo = mealTypes.find((m) => m.key === mealType);

  return (
    <div
      ref={drop as unknown as React.Ref<HTMLDivElement>}
      className={`min-h-[160px] flex justify-between items-center flex-col p-3 rounded-lg border-2 border-dashed transition-all duration-200 overflow-clip ${
        isOver
          ? "border-primary bg-primary/10 scale-105"
          : recipe
          ? "border-transparent bg-card shadow-sm"
          : "border-muted-foreground/30 hover:border-primary/50 hover:bg-muted/30"
      }`}
    >
      <div className="flex items-center justify-between mb-2  ">
        <Badge variant="outline" className={`text-xs ${mealTypeInfo?.color}`}>
          {mealTypeInfo?.label}
        </Badge>
        {recipe && (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6 rounded-full"
              >
                <MoreHorizontal className="h-3 w-3" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={onSlotClick}>
                <Edit3 className="h-4 w-4 mr-2" />
                Replace
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={onRemoveRecipe}
                className="text-destructive"
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Remove
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        )}
      </div>

      {recipe ? (
        <div className="space-y-2">
          <div className="flex items-start gap-2">
            <img
              src={recipe.image || "/placeholder.svg"}
              alt={recipe.title}
              className="w-12 h-12 rounded-lg object-cover flex-shrink-0"
            />
            <div className="flex-1 min-w-0">
              <h4 className="font-medium text-sm line-clamp-2 mb-1">
                {recipe.title}
              </h4>
              <div className="flex items-center gap-2 text-xs text-muted-foreground">
                <div className="flex items-center gap-1">
                  <Clock className="h-3 w-3" />
                  {recipe.prepTime + recipe.cookTime}m
                </div>
                <div className="flex items-center gap-1">
                  <Users className="h-3 w-3" />
                  {recipe.servings}
                </div>
              </div>
            </div>
          </div>
          <div className="flex items-center justify-between text-xs">
            <span className="font-medium text-primary">
              {recipe.calories} cal
            </span>
            <div className="flex gap-1">
              <span className="text-green-600">{recipe.protein}p</span>
              <span className="text-orange-600">{recipe.carbs}c</span>
              <span className="text-red-600">{recipe.fat}f</span>
            </div>
          </div>
        </div>
      ) : (
        <div className="flex flex-col items-center justify-center h-full text-center ">
          <Button
            variant="ghost"
            size="sm"
            onClick={onSlotClick}
            className="text-muted-foreground hover:text-primary rounded-full border-2 flex justify-center m-2 py-4 px-6 md:p-0"
          >
            <Plus className="h-4 w-4 mr-1 " />
            Add meal
          </Button>
        </div>
      )}
    </div>
  );
}

export function WeeklyCalendar({
  weekDates,
  mealPlan,
  onSlotClick,
  onRemoveRecipe,
  onAddRecipe,
}: WeeklyCalendarProps) {
  return (
    <Card className="border-0 shadow-lg md:min-h-[800px]">
      <CardContent className="p-6 overflow-clip">
        <div className="grid grid-cols-1 lg:grid-cols-7 gap-2">
          {daysOfWeek.map((day, index) => (
            <div key={day} className="space-y-4">
              {/* Day Header */}
              <div className="text-center">
                <h3 className="font-semibold text-sm">{day}</h3>
                <p className="text-xs text-muted-foreground">
                  {weekDates[index]?.toLocaleDateString("en-US", {
                    month: "short",
                    day: "numeric",
                  })}
                </p>
              </div>

              {/* Meal Slots */}
              <div className="space-y-3 ">
                {mealTypes.map((mealType) => (
                  <MealSlot
                    key={`${day}-${mealType.key}`}
                    day={day}
                    mealType={mealType.key}
                    recipe={mealPlan[day]?.[mealType.key] || null}
                    onSlotClick={() => onSlotClick(day, mealType.key)}
                    onRemoveRecipe={() => onRemoveRecipe(day, mealType.key)}
                    onAddRecipe={(recipe) =>
                      onAddRecipe(day, mealType.key, recipe)
                    }
                  />
                ))}
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}











"use client";

import { useState, useCallback } from "react";
import { DndProvider } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import {
  Calendar,
  Plus,
  Share2,
  Save,
  ChevronLeft,

  ChevronRight,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { WeeklyCalendar } from "@/component/meal-planner/weekly-calendar";
import { RecipeLibrary } from "@/component/meal-planner/recipe-library";
import { AddRecipeModal } from "@/component/meal-planner/add-recipe-modal";

// import { NutritionSummary } from "@/components/meal-planner/nutrition-summary";

// import { ShareMealPlanModal } from "@/components/meal-planner/share-meal-plan-modal";

// Types
export interface Recipe {
  id: number;
  title: string;
  image: string;
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
  prepTime: number;
  cookTime: number;
  servings: number;
  difficulty: string;
  dietTypes: string[];
  mealType: string[];
}

export interface MealSlot {
  day: string;
  mealType: "breakfast" | "lunch" | "dinner" | "snack";
  recipe?: Recipe;
}

// Mock data
const mockSavedRecipes: Recipe[] = [
  {
    id: 1,
    title: "Mediterranean Quinoa Bowl",
    image: "https://spoonacular.com/recipeImages/12345-312x231.jpg",
    calories: 420,
    protein: 18,
    carbs: 52,
    fat: 14,
    prepTime: 15,
    cookTime: 20,
    servings: 2,
    difficulty: "Easy",
    dietTypes: ["Vegetarian", "Gluten-Free"],
    mealType: ["Lunch", "Dinner"],
  },
  {
    id: 2,
    title: "Overnight Oats with Berries",
    image: "https://spoonacular.com/recipeImages/12345-312x231.jpg",
    calories: 320,
    protein: 12,
    carbs: 48,
    fat: 10,
    prepTime: 10,
    cookTime: 0,
    servings: 1,
    difficulty: "Easy",
    dietTypes: ["Vegetarian", "High Fiber"],
    mealType: ["Breakfast"],
  },
  {
    id: 3,
    title: "Grilled Chicken Caesar",
    image: "https://spoonacular.com/recipeImages/12345-312x231.jpg",
    calories: 380,
    protein: 32,
    carbs: 12,
    fat: 24,
    prepTime: 20,
    cookTime: 15,
    servings: 2,
    difficulty: "Medium",
    dietTypes: ["High Protein", "Low Carb"],
    mealType: ["Lunch", "Dinner"],
  },
  {
    id: 4,
    title: "Avocado Toast",
    image: "https://spoonacular.com/recipeImages/12345-312x231.jpg",
    calories: 280,
    protein: 8,
    carbs: 24,
    fat: 18,
    prepTime: 5,
    cookTime: 5,
    servings: 1,
    difficulty: "Easy",
    dietTypes: ["Vegetarian", "Quick"],
    mealType: ["Breakfast", "Snack"],
  },
  {
    id: 5,
    title: "Greek Yogurt Parfait",
    image: "https://spoonacular.com/recipeImages/12345-312x231.jpg",
    calories: 250,
    protein: 15,
    carbs: 30,
    fat: 8,
    prepTime: 5,
    cookTime: 0,
    servings: 1,
    difficulty: "Easy",
    dietTypes: ["Vegetarian", "High Protein"],
    mealType: ["Breakfast", "Snack"],
  },
  {
    id: 6,
    title: "Keto Salmon Bowl",
    image: "https://spoonacular.com/recipeImages/12345-312x231.jpg",
    calories: 480,
    protein: 35,
    carbs: 8,
    fat: 36,
    prepTime: 10,
    cookTime: 15,
    servings: 2,
    difficulty: "Medium",
    dietTypes: ["Keto", "Low Carb"],
    mealType: ["Dinner"],
  },
];

const daysOfWeek = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
];

export default function MealPlannerPage() {
  const [currentWeek, setCurrentWeek] = useState(new Date());
  const [mealPlan, setMealPlan] = useState<
    Record<string, Record<string, Recipe | null>>
  >(() => {
    const initialPlan: Record<string, Record<string, Recipe | null>> = {};
    daysOfWeek.forEach((day) => {
      initialPlan[day] = {
        breakfast: null,
        lunch: null,
        dinner: null,
        snack: null,
      };
    });
    return initialPlan;
  });
  const [selectedSlot, setSelectedSlot] = useState<{
    day: string;
    mealType: string;
  } | null>(null);
  const [showAddRecipeModal, setShowAddRecipeModal] = useState(false);
  const [showShareModal, setShowShareModal] = useState(false);
  const [activeView, setActiveView] = useState<"calendar" | "library">(
    "calendar"
  );

  const addRecipeToSlot = useCallback(
    (day: string, mealType: string, recipe: Recipe) => {
      setMealPlan((prev) => ({
        ...prev,
        [day]: {
          ...prev[day],
          [mealType]: recipe,
        },
      }));
    },
    []
  );

  const removeRecipeFromSlot = useCallback((day: string, mealType: string) => {
    setMealPlan((prev) => ({
      ...prev,
      [day]: {
        ...prev[day],
        [mealType]: null,
      },
    }));
  }, []);

  const handleSlotClick = (day: string, mealType: string) => {
    setSelectedSlot({ day, mealType });
    setShowAddRecipeModal(true);
  };

  const handleAddRecipe = (recipe: Recipe) => {
    if (selectedSlot) {
      addRecipeToSlot(selectedSlot.day, selectedSlot.mealType, recipe);
      setShowAddRecipeModal(false);
      // wait until Dialog finishes unmounting before clearing slot
       setSelectedSlot(null)
    }
  };

  const getWeekDates = (date: Date) => {
    const week = [];
    const startDate = new Date(date);
    const day = startDate.getDay();
    const diff = startDate.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday
    startDate.setDate(diff);

    for (let i = 0; i < 7; i++) {
      const currentDate = new Date(startDate);
      currentDate.setDate(startDate.getDate() + i);
      week.push(currentDate);
    }
    return week;
  };

  const weekDates = getWeekDates(currentWeek);

  const navigateWeek = (direction: "prev" | "next") => {
    const newDate = new Date(currentWeek);
    newDate.setDate(currentWeek.getDate() + (direction === "next" ? 7 : -7));
    setCurrentWeek(newDate);
  };

  const saveMealPlan = () => {
    // Save meal plan logic
    console.log("Saving meal plan:", mealPlan);
  };

  return (
    <DndProvider backend={HTML5Backend}>
        <div className="flex ">
          <main className="flex-1 md:mx-9 p-6">
            {/* Header */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
              <div>
                <h1 className="text-3xl font-bold mb-2 dm">Meal Planner</h1>
                <p className="text-muted-foreground poppins">
                  Plan your weekly meals and track your nutrition
                </p>
              </div>
              <div className="flex items-center gap-3 mt-4 sm:mt-0">
                <Button
                  variant="outline"
                  onClick={() => setShowShareModal(true)}
                  className="rounded-xl bg-transparent"
                >
                  <Share2 className="h-4 w-4 mr-2" />
                  Share
                </Button>
                <Button
                  onClick={saveMealPlan}
                  className="rounded-xl bg-gradient-to-r from-primary to-accent hover:opacity-90"
                >
                  <Save className="h-4 w-4 mr-2" />
                  Save Plan
                </Button>
              </div>
            </div>

            {/* Week Navigation */}
            <Card className="mb-6 border-0 shadow-lg">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => navigateWeek("prev")}
                    className="rounded-full"
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <div className="text-center">
                    <h2 className="text-lg font-semibold">
                      {weekDates[0].toLocaleDateString("en-US", {
                        month: "long",
                        day: "numeric",
                      })}{" "}
                      -{" "}
                      {weekDates[6].toLocaleDateString("en-US", {
                        month: "long",
                        day: "numeric",
                        year: "numeric",
                      })}
                    </h2>
                    <p className="text-sm text-muted-foreground">
                      Week of {weekDates[0].toLocaleDateString()}
                    </p>
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => navigateWeek("next")}
                    className="rounded-full"
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Main Content */}
            <div className="grid grid-cols-1 xl:grid-cols-4 gap-6">
              {/* Calendar/Library Toggle for Mobile */}
              <div className="xl:hidden">
                <Tabs
                  value={activeView}
                  onValueChange={(value) =>
                    setActiveView(value as "calendar" | "library")
                  }
                >
                  <TabsList className="grid w-full grid-cols-2 rounded-xl">
                    <TabsTrigger value="calendar" className="rounded-xl">
                      <Calendar className="h-4 w-4 mr-2" />
                      Calendar
                    </TabsTrigger>
                    <TabsTrigger value="library" className="rounded-xl">
                      <Plus className="h-4 w-4 mr-2" />
                      Recipes
                    </TabsTrigger>
                  </TabsList>
                  <TabsContent value="calendar" className="mt-6">
                    <WeeklyCalendar
                      weekDates={weekDates}
                      mealPlan={mealPlan}
                      onSlotClick={handleSlotClick}
                      onRemoveRecipe={removeRecipeFromSlot}
                      onAddRecipe={addRecipeToSlot}
                    />
                  </TabsContent>
                  <TabsContent value="library" className="mt-6">
                    <RecipeLibrary recipes={mockSavedRecipes} />
                  </TabsContent>
                </Tabs>
              </div>

              {/* Desktop Layout */}
              <div className="hidden xl:block xl:col-span-3 ">
                <WeeklyCalendar
                  weekDates={weekDates}
                  mealPlan={mealPlan}
                  onSlotClick={handleSlotClick}
                  onRemoveRecipe={removeRecipeFromSlot}
                  onAddRecipe={addRecipeToSlot}
                />
              </div>

              <div className="hidden xl:block">
                <RecipeLibrary recipes={mockSavedRecipes} />
              </div>
            </div>

            {/* Nutrition Summary */}
            <div className="mt-8">
              {/* <NutritionSummary mealPlan={mealPlan} weekDates={weekDates} /> */}
            </div>
          </main>
        </div> 

        {/* Modals */}
        {showAddRecipeModal && selectedSlot && (
          <AddRecipeModal
            isOpen={showAddRecipeModal}
            onClose={() => {
              setShowAddRecipeModal(false);
              setSelectedSlot(null);
            }}
            onAddRecipe={handleAddRecipe}
            recipes={mockSavedRecipes}
            selectedSlot={selectedSlot}
          />
        )}

        {/* {showShareModal && (
          <ShareMealPlanModal
            isOpen={showShareModal}
            onClose={() => setShowShareModal(false)}
            mealPlan={mealPlan}
            weekDates={weekDates}
          />
        )} */}
    </DndProvider>
  );
}



