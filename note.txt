// /store/recipeStore.ts
import { create } from "zustand";
import { Recipe, fetchRecipes } from "@/lib/spoonacular";

interface RecipeState {
  recipes: Recipe[];
  loading: boolean;
  error: string | null;
  getRecipes: (query?: string) => Promise<void>;
}

export const useRecipeStore = create<RecipeState>((set) => ({
  recipes: [],
  loading: false,
  error: null,

  getRecipes: async (query = "") => {
    try {
      set({ loading: true, error: null });
      const data = await fetchRecipes(query);
      set({ recipes: data, loading: false });
    } catch (err) {
      set({ error: (err as Error).message, loading: false });
    }
  },
}));














// /lib/spoonacular.ts
const API_KEY = process.env.NEXT_PUBLIC_SPOONACULAR_KEY;
const BASE_URL = "https://api.spoonacular.com/recipes";

export interface Recipe {
  id: number;
  title: string;
  image: string;
  readyInMinutes: number;
  servings: number;
  spoonacularScore?: number; // rating (0â€“100)
  dishTypes?: string[];
  cuisines?: string[];
  pricePerServing?: number;
  summary?: string; // HTML string with description
  instructions?: string; // may be HTML
  nutrition?: {
    nutrients: Nutrient[];
  };
}
export interface Nutrient {
  name: string; // e.g. "Protein"
  amount: number; // e.g. 25
  unit: string; // e.g. "g"
}


export async function fetchRecipes(
  query: string = "",
  number: number = 100,
): Promise<Recipe[]> {
  const res = await fetch(
     `${BASE_URL}/complexSearch?query=${query}&number=${number}&addRecipeInformation=true&addRecipeNutrition=true&apiKey=${API_KEY}`,
    { next: { revalidate: 60 } } // ISR caching for 1 min
  );

  if (!res.ok) throw new Error("Failed to fetch recipes");
  const data = await res.json();
  return data.results;
}




// "use client"
// import { mockRecipes } from "@/app/data/recipe";
// import RecipeDetails from "@/component/recipe-details";

// export default function RecipePage({ params }: { params: { id: string } }) {
//   const recipe = mockRecipes.find((r) => r.id === parseInt(params.id));

//   if (!recipe) return <p>Recipe not found</p>;

//   return <RecipeDetails recipe={{...recipe, id: recipe.id.toString()}} />;
// }





{/* 
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 mt-6 text-center bg-gray-100 p-4 rounded-lg">
              <div>
                <p className="font-bold">{recipe.nutrition.calories}</p>
                <p className="text-xs text-gray-500">Calories</p>
              </div>
              <div>
                <p className="font-bold">{recipe.nutrition.protein}g</p>
                <p className="text-xs text-gray-500">Protein</p>
              </div>
              <div>
                <p className="font-bold">{recipe.nutrition.carbs}g</p>
                <p className="text-xs text-gray-500">Carbs</p>
              </div>
              <div>
                <p className="font-bold">{recipe.nutrition.fat}g</p>
                <p className="text-xs text-gray-500">Fat</p>
              </div>
            </div> */}

            {/* <div>
              <h2 className="text-xl font-semibold mt-6 mb-2">Ingredients</h2>
              <ul className="list-disc list-inside text-gray-700 space-y-1">
                {recipe.ingredients.map((item, idx) => (
                  <li key={idx}>{item}</li>
                ))}
              </ul>
            </div>

            <div>
              <h2 className="text-xl font-semibold mt-6 mb-2">Instructions</h2>
              <ol className="list-decimal list-inside text-gray-700 space-y-1">
                {recipe.instructions.map((step, idx) => (
                  <li key={idx}>{step}</li>
                ))}
              </ol>
            </div> */}







            "use client";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

import React from "react";
import { MealCard } from "@/component/meal-card";

const days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
const slots = ["Breakfast", "Lunch", "Dinner"];

export default function PlannerPage() {
  return (
    <div className="w-full p-4">
      {/* Desktop Table Layout */}
      <div className="hidden md:grid grid-cols-[100px_repeat(7,minmax(0,1fr))] gap-2">
        {/* Top row - days */}
        <div /> {/* empty top-left corner */}
        {days.map((day) => (
          <div
            key={day}
            className="text-center font-semibold text-sm text-muted-foreground"
          >
            {day}
          </div>
        ))}
        {/* Rows for slots */}
        {slots.map((slot) => (
          <React.Fragment key={slot}>
            {/* Slot label */}
            <div className="font-medium text-sm flex items-center justify-start">
              {slot}
            </div>

            {/* Grid cells */}
            {days.map((day) => (
              <Card
                key={`${day}-${slot}`}
                className="h-28 flex flex-col justify-center items-center hover:shadow-md transition"
              >
                <CardContent className="p-2 w-full h-full flex flex-col justify-center items-center">
                  <MealCard
                    title="Chicken Salad"
                    image="https://spoonacular.com/recipeImages/12345-312x231.jpg"
                    calories={420}
                    onRemove={() => console.log("remove meal")}
                  />
                  <Button
                    variant="ghost"
                    size="sm"
                    className="text-muted-foreground text-xs"
                  >
                    + Add
                  </Button>
                </CardContent>
              </Card>
            ))}
          </React.Fragment>
        ))}
      </div>

      {/* Mobile Layout - stack by day */}
      <div className="md:hidden flex flex-col gap-6">
        {days.map((day) => (
          <div key={day} className="border rounded-lg p-3">
            <h3 className="font-semibold mb-2">{day}</h3>
            <div className="flex flex-col gap-3">
              {slots.map((slot) => (
                <Card
                  key={`${day}-${slot}`}
                  className="flex flex-col hover:shadow-md transition"
                >
                  <CardContent className="p-2 flex flex-col gap-1">
                    <span className="text-xs font-medium text-muted-foreground">
                      {slot}
                    </span>
                    <MealCard
                      title="Chicken Salad"
                      image="https://spoonacular.com/recipeImages/12345-312x231.jpg"
                      calories={420}
                      onRemove={() => console.log("remove meal")}
                    />
                    <Button
                      variant="ghost"
                      size="sm"
                      className="text-muted-foreground text-xs"
                    >
                      + Add
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
